version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: inv-manager-db
    environment:
      POSTGRES_DB: inventory_manager
      POSTGRES_USER: inv_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-inventory_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - inv-manager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inv_user -d inventory_manager"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: inv-manager-backend
    environment:
      NODE_ENV: production
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: inventory_manager
      DB_USER: inv_user
      DB_PASSWORD: ${DB_PASSWORD:-inventory_secure_password}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_in_production}
      JWT_EXPIRES_IN: 7d
      PORT: 3000
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@inventory.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - inv-manager-network
    restart: unless-stopped
    volumes:
      - ./backend/src:/app/src
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: inv-manager-frontend
    environment:
      API_BASE_URL: http://localhost:3000/api
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - inv-manager-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: inv-manager-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - inv-manager-network
    restart: unless-stopped
    profiles:
      - with-proxy

volumes:
  postgres_data:
    driver: local

networks:
  inv-manager-network:
    driver: bridge